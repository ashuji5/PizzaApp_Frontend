[{"E:\\Project1\\pizza-app\\Client\\src\\index.js":"1","E:\\Project1\\pizza-app\\Client\\src\\App.js":"2","E:\\Project1\\pizza-app\\Client\\src\\redux\\rootReducer.js":"3","E:\\Project1\\pizza-app\\Client\\src\\Components\\Order\\Order.js":"4","E:\\Project1\\pizza-app\\Client\\src\\Components\\Navbar\\Navbar.js":"5","E:\\Project1\\pizza-app\\Client\\src\\Components\\Menu\\Menu.js":"6","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\productreducer.js":"7","E:\\Project1\\pizza-app\\Client\\src\\Components\\Cart\\Cart.js":"8","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\actiontypes.js":"9","E:\\Project1\\pizza-app\\Client\\src\\Components\\Product\\Products.js":"10","E:\\Project1\\pizza-app\\Client\\src\\Components\\Cart\\CartItem.js":"11","E:\\Project1\\pizza-app\\Client\\src\\Components\\Product\\Product.js":"12","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\productaction.js":"13","E:\\Project1\\pizza-app\\Client\\src\\Components\\Register\\Register.js":"14","E:\\Project1\\pizza-app\\Client\\src\\Components\\Login\\Login.js":"15","E:\\Project1\\pizza-app\\Client\\src\\api\\index.js":"16","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\cartreducer.js":"17","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\authreducer.js":"18","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\authaction.js":"19","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\orderaction.js":"20","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\orderReducer.js":"21","E:\\Project1\\pizza-app\\Client\\src\\Components\\Order\\OrderItme.js":"22","E:\\Project1\\pizza-app\\Client\\src\\Components\\Order\\OrderItemMenu.js":"23","E:\\Project1\\pizza-app\\Client\\src\\Components\\Dashboard\\Dash.js":"24","E:\\Project1\\pizza-app\\Client\\src\\Components\\Dashboard\\DashboardItem.js":"25","E:\\Project1\\pizza-app\\Client\\src\\Components\\Dashboard\\DashboardMenu.js":"26","E:\\Project1\\pizza-app\\Client\\src\\Components\\SingleProduct\\Single.js":"27","E:\\Project1\\pizza-app\\Client\\src\\Components\\StatusPage\\StatusPage.js":"28"},{"size":592,"mtime":1620821809507,"results":"29","hashOfConfig":"30"},{"size":1844,"mtime":1624451484973,"results":"31","hashOfConfig":"30"},{"size":390,"mtime":1619525417848,"results":"32","hashOfConfig":"30"},{"size":2188,"mtime":1619870363613,"results":"33","hashOfConfig":"30"},{"size":5352,"mtime":1621668814340,"results":"34","hashOfConfig":"30"},{"size":3502,"mtime":1620308949516,"results":"35","hashOfConfig":"30"},{"size":5542,"mtime":1619783472799,"results":"36","hashOfConfig":"30"},{"size":8074,"mtime":1622724358987,"results":"37","hashOfConfig":"30"},{"size":1149,"mtime":1620310858857,"results":"38","hashOfConfig":"30"},{"size":902,"mtime":1620306800524,"results":"39","hashOfConfig":"30"},{"size":2611,"mtime":1621407473948,"results":"40","hashOfConfig":"30"},{"size":2412,"mtime":1621518631912,"results":"41","hashOfConfig":"30"},{"size":2310,"mtime":1621406637754,"results":"42","hashOfConfig":"30"},{"size":4004,"mtime":1619179206043,"results":"43","hashOfConfig":"30"},{"size":3465,"mtime":1619179944472,"results":"44","hashOfConfig":"30"},{"size":919,"mtime":1626266632747,"results":"45","hashOfConfig":"30"},{"size":3170,"mtime":1622724617690,"results":"46","hashOfConfig":"30"},{"size":527,"mtime":1619700478327,"results":"47","hashOfConfig":"30"},{"size":625,"mtime":1619179205949,"results":"48","hashOfConfig":"30"},{"size":2578,"mtime":1620301524629,"results":"49","hashOfConfig":"30"},{"size":1747,"mtime":1620311473785,"results":"50","hashOfConfig":"30"},{"size":1616,"mtime":1620312850294,"results":"51","hashOfConfig":"30"},{"size":217,"mtime":1619791505339,"results":"52","hashOfConfig":"30"},{"size":3160,"mtime":1621668178109,"results":"53","hashOfConfig":"30"},{"size":1804,"mtime":1620645616725,"results":"54","hashOfConfig":"30"},{"size":247,"mtime":1619877654384,"results":"55","hashOfConfig":"30"},{"size":168,"mtime":1620216364453,"results":"56","hashOfConfig":"30"},{"size":8107,"mtime":1621052637465,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"1bfjsrx",{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"61"},"E:\\Project1\\pizza-app\\Client\\src\\index.js",["127","128"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport rootReducer from './redux/rootReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport {createStore, applyMiddleware, compose} from 'redux';\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk),  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()|| window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose ),\n);\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n",["129","130"],"E:\\Project1\\pizza-app\\Client\\src\\App.js",["131","132"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getProducts } from './redux/Shopping/productaction';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Redirect, Route } from 'react-router-dom';\nimport Menu from './Components/Menu/Menu';\nimport Order from './Components/Order/Order';\nimport Login from './Components/Login/Login';\nimport Register from './Components/Register/Register';\nimport Dash from './Components/Dashboard/Dash'\nimport Cart from './Components/Cart/Cart';\nimport Navbar from './Components/Navbar/Navbar';\nimport SingleProduct from './Components/SingleProduct/Single';\nimport StatusPage from './Components/StatusPage/StatusPage';\n\nconst App = () => {\n\n  const dispatch = useDispatch();\n\n  const productsData = useSelector(state => state.productreducer)\n  const { products, loading, error } = productsData;\n\n  useEffect(() => {\n    dispatch(getProducts());\n  }, [dispatch]);\n\n  if (loading == true) {\n    return (\n      <>\n        <h2>Loading</h2>\n      </>\n    )\n  }\n\n  else if (error) {\n    return (\n      <h2>{error}</h2>\n    )\n  }\n\n\n\n  else {\n    return (\n      <>\n\n\n\n        <BrowserRouter>\n          <div>\n            <Navbar />\n            <Route exact path=\"/\" component={Menu} />\n            <Route path=\"/orders\" component={Order\n            } />\n            <Route path=\"/cart\" component={Cart} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/dashboard\" component={Dash} />\n            <Route path=\"/details/:id\" component={SingleProduct} />\n            <Route path=\"/status/:id\" component={StatusPage} />\n            <Redirect to=\"/\" />\n          </div>\n        </BrowserRouter>\n      </>\n    )\n  }\n\n}\n\n\n\nexport default App;\n","E:\\Project1\\pizza-app\\Client\\src\\redux\\rootReducer.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Order\\Order.js",["133","134","135"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport '../Order/Order.css';\r\nimport { getOrder } from '../../redux/Shopping/orderaction';\r\n\r\nimport OrderItem from '../Order/OrderItme';\r\n\r\nfunction Order() {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n\r\n\r\n    const orders = useSelector(state => state.orderReducer.orders)\r\n    const loading = useSelector(state => state.orderReducer.loading);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getOrder(user.result._id));\r\n    }, [dispatch]);\r\n\r\n\r\n    if (loading === true) {\r\n        return (\r\n            <div>Loading</div>\r\n        )\r\n    }\r\n\r\n    if(orders==undefined){\r\n        return(\r\n            <div>Loading...</div>\r\n        )\r\n    }\r\n\r\n\r\n    else {\r\n        return (\r\n            <div className=\"main-order\">\r\n                <h2>Orders</h2>\r\n                <div className=\"o-table\">\r\n                    <table class=\"styled-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"order-id\">Orders</th>\r\n                                <th>Items</th>\r\n                                <th>Phone</th>\r\n                                <th>Address</th>\r\n                                <th>Time</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {/* <tr>\r\n                        <td>Dom</td>\r\n                        <td>6000</td>\r\n                    </tr>\r\n                    <tr class=\"\">\r\n                        <td>Melissa</td>\r\n                        <td>5150</td>\r\n                    </tr> */}\r\n\r\n                            {orders.map((data, ind) => {\r\n                                return <OrderItem\r\n                                    key={ind}\r\n                                    data={data}\r\n                                />\r\n                            })}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Order","E:\\Project1\\pizza-app\\Client\\src\\Components\\Navbar\\Navbar.js",["136","137","138","139","140","141","142","143","144"],"import React, { useState, useEffect } from 'react';\r\nimport { LOGOUT } from '../../redux/Shopping/actiontypes';\r\nimport '../Navbar/Navbar.css'\r\nimport CloseMenu from '../image/cross-sign.png';\r\nimport MenuIcon from '../image/hamburger.svg';\r\nimport web from '../image/pizza.svg'\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Cart from '../Cart/Cart';\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n\r\n  //const cart = JSON.parse(localStorage.getItem('cart'));\r\n  const cart = useSelector(state => state.cartreducer.cart);\r\n\r\n\r\n  //console.log(cart);\r\n\r\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n  const [isMoblie, setIsMoblie] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = user?.token;\r\n\r\n\r\n    setUser(JSON.parse(localStorage.getItem('profile')));\r\n\r\n  }, [location]);\r\n\r\n  console.log(user);\r\n\r\n\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    let inCount = 0;\r\n    if (cart) {\r\n      cart.forEach((item) => {\r\n        inCount += item.qty;\r\n      });\r\n    }\r\n\r\n    setCount(inCount);\r\n\r\n  }, [count, cart])\r\n\r\n\r\n  const [click, setClick] = useState(false);\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n\r\n  const logout = () => {\r\n\r\n    setClick(false);\r\n    dispatch({ type: LOGOUT })\r\n  }\r\n\r\n\r\n  if (user?.token) {\r\n    return (\r\n\r\n      <>\r\n\r\n        <div className=\"header\">\r\n          <div className=\"logo-nav\">\r\n            <div className=\"logo-container\">\r\n              <Link className=\"logo-text\" style={{ textDecoration: 'none' }} to=\"/\">\r\n                <img src={web} className=\"logo\" alt={web} />\r\n               Pizza\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"navu-links\">\r\n              <ul className={click ? \"nav-options active\" : \"nav-options\"}>\r\n                <li className=\"option\" onClick={closeMobileMenu}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/\">Menu</Link>\r\n                </li>\r\n                <li className=\"option\" onClick={closeMobileMenu}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/orders\" >Orders</Link>\r\n                </li>\r\n\r\n                <li className=\"option\" onClick={closeMobileMenu}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/dashboard\">Dashboard</Link>\r\n                </li>\r\n\r\n                <li className=\"option\" onClick={logout}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/\">Logout</Link>\r\n                </li>\r\n\r\n                <li className=\"optio \" onClick={closeMobileMenu}>\r\n                  <Link className=\"cart-link\" style={{ textDecoration: 'none' }} to=\"/cart\"><div className=\"cart-icon\" ><i className=\" fas fa-shopping-cart\"></i><span>{count}</span> </div> </Link>\r\n                </li>\r\n\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mobile-menu\" onClick={handleClick}>\r\n            {click ? (\r\n              <img src={CloseMenu} className=\"menu-icon\" />\r\n            ) : (\r\n              <img src={MenuIcon} className=\"menu-icon\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n\r\n  else {\r\n\r\n    return (\r\n      <>\r\n\r\n        <div className=\"header\">\r\n          <div className=\"logo-nav\">\r\n            <div className=\"logo-container\">\r\n              <Link className=\"logo-text\" style={{ textDecoration: 'none' }} to=\"/\">\r\n                <img src={web} className=\"logo\" alt={web} />\r\n               Pizza\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"navu-links\">\r\n              <ul className={click ? \"nav-options active\" : \"nav-options\"}>\r\n                <li className=\"option\" onClick={closeMobileMenu}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/\">Menu</Link>\r\n                </li>\r\n                <li className=\"option\" onClick={closeMobileMenu}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/login\" >Login</Link>\r\n                </li>\r\n\r\n                <li className=\"option\" onClick={closeMobileMenu}>\r\n                  <Link style={{ textDecoration: 'none' }} to=\"/register\">Register</Link>\r\n                </li>\r\n\r\n                {/* <li className=\"option\" onClick={logout}>\r\n                <Link style={{ textDecoration: 'none' }} to =\"/\">Logout</Link>\r\n              </li> */}\r\n\r\n                <li className=\"optio\" onClick={closeMobileMenu}>\r\n                  <Link className=\"cart-link\" style={{ textDecoration: 'none' }} to=\"/cart\"><div className=\"cart-icon\" ><i className=\" fas fa-shopping-cart\"></i><span>{count}</span> </div> </Link>\r\n                </li>\r\n\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mobile-menu\" onClick={handleClick}>\r\n            {click ? (\r\n              <img src={CloseMenu} className=\"menu-icon\" />\r\n            ) : (\r\n              <img src={MenuIcon} className=\"menu-icon\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n      </>\r\n    )\r\n\r\n  }\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     cart : state.productreducer.cart\r\n//   }\r\n// }\r\n\r\n// export default connect(mapStateToProps)(Navbar);\r\nexport default Navbar;","E:\\Project1\\pizza-app\\Client\\src\\Components\\Menu\\Menu.js",[],"E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\productreducer.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Cart\\Cart.js",["145","146","147"],"import React, {useState, useEffect} from 'react'\r\nimport './Cart.css';\r\nimport emptyCart from '../image/empty-cart.png';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport CartItem from './CartItem';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {createOrder} from '../../redux/Shopping/orderaction';\r\nimport { CLEAR_CART } from '../../redux/Shopping/actiontypes';\r\n\r\nfunction Cart() {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n   // console.log(carting)\r\n\r\n    \r\n\r\n    const cart = useSelector(state => state.cartreducer.cart);\r\n  // const cart = JSON.parse(localStorage.getItem('cart'));\r\n\r\n    var totalPrice = 0;\r\n \r\n    useEffect(() =>{\r\n\r\n    },[cart])\r\n    \r\n\r\n    if(cart){\r\n    cart.map(item => {\r\n        totalPrice = totalPrice + parseFloat(item.price)*item.qty;\r\n    })\r\n}\r\n\r\n\r\n\r\n    // Logic of posting an Order\r\n\r\n    const inState = {address: \"\", phone : \"\"};\r\n    const[formData, setformData] = useState(inState);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n    \r\n        dispatch(  createOrder(formData, totalPrice, cart, user.result._id));\r\n        dispatch({type : CLEAR_CART})\r\n\r\n        history.push('/orders')\r\n\r\n       console.log(formData);\r\n       console.log(totalPrice);\r\n       console.log(cart)\r\n        \r\n        }\r\n\r\n        const handleChange = (e) => {\r\n            setformData({...formData, [e.target.name] : e.target.value})\r\n        }\r\n\r\n       \r\n    \r\n\r\n \r\n\r\n    console.log(totalPrice);\r\n\r\n    if(user){\r\n    if (cart==null||cart.length ==0) {\r\n        return (\r\n            <>\r\n                <div className=\" empty-page \">\r\n                    <div className=\" empty-cart\">\r\n                        <div className=\"empty-text\">\r\n                            <h2> Cart is empty... 🙁</h2>\r\n                            <div className=\"cart-text\">\r\n                                <p>You probably haven't added anything to the cart yet. To Order a pizza, go to the menu page</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"empty-img\">\r\n                            <img className=\"img-fluid\" src={emptyCart} alt={emptyCart} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <>\r\n\r\n                <div className=\"cart-page\">\r\n                    <div className=\"container \">\r\n                        <div className=\"order-heading text-center mb-10\">\r\n                            <i class=\"fas fa-shopping-cart sum-img\"></i>\r\n                            <h3 className=\"sum\"> Cart summary</h3>\r\n                        </div>\r\n\r\n\r\n                        <hr className=\"line\"></hr>\r\n                        <div className=\"row\">\r\n                            {cart.map((data, ind) => {\r\n                                return <CartItem\r\n                                    key={ind}\r\n                                    data={data}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                        <hr className=\"line\"></hr>\r\n\r\n\r\n\r\n                        <div className=\"total-price\">\r\n                            <p>Total Amount: <h4 className=\"amount\">{totalPrice}$</h4></p>\r\n\r\n                            <div>\r\n                                <h5>Payement : COD</h5>\r\n\r\n                                <form className=\"price-form\" onSubmit = {handleSubmit} >\r\n                                    <label ><strong> Address :</strong> </label><br></br>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name = \"address\"\r\n                                        placeholder=\"Address\"\r\n                                        onChange = {handleChange}\r\n                                    ></input> <br></br>\r\n                                    <label className=\"mt-2\"><strong> Phone No :</strong></label><br></br>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name = \"phone\"\r\n                                        onChange = {handleChange}\r\n                                        placeholder=\"Phone Number\"\r\n                                    >\r\n                                    </input><br></br>\r\n\r\n                                    <button className=\"price-btn btn btn-get-started\"  type = \"submit\"> Order Now </button>\r\n\r\n\r\n                                </form>\r\n\r\n                                \r\n                                \r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nelse{\r\n\r\n\r\n    if (cart==null || cart.length == 0) {\r\n        return (\r\n            <>\r\n                <div className=\" empty-page \">\r\n                    <div className=\" empty-cart\">\r\n                        <div className=\"empty-text\">\r\n                            <h2> Cart is empty... 🙁</h2>\r\n                            <div className=\"cart-text\">\r\n                                <p>You probably haven't added anything to the cart yet. To Order a pizza, go to the menu page</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"empty-img\">\r\n                            <img className=\"img-fluid\" src={emptyCart} alt={emptyCart} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <>\r\n\r\n                <div className=\"cart-page\">\r\n                    <div className=\"container \">\r\n                        <div className=\"order-heading text-center mb-10\">\r\n                            <i class=\"fas fa-shopping-cart sum-img\"></i>\r\n                            <h3 className=\"sum\"> Cart summary</h3>\r\n                        </div>\r\n\r\n\r\n                        <hr className=\"line\"></hr>\r\n                        <div className=\"row\">\r\n                            {cart.map((data, ind) => {\r\n                                return <CartItem\r\n                                    key={ind}\r\n                                    data={data}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                        <hr className=\"line\"></hr>\r\n\r\n\r\n\r\n                        <div className=\"total-price\">\r\n                            <p>Total Amount: <h4 className=\"amount\">{totalPrice}$</h4></p>\r\n\r\n                            <div>\r\n                                <h5>Payement : COD</h5>\r\n\r\n                                <form className=\"price-form\">\r\n                                    <label ><strong> Address :</strong> </label><br></br>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Address\"\r\n                                    ></input> <br></br>\r\n                                    <label className=\"mt-2\"><strong> Phone No :</strong></label><br></br>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Phone Number\"\r\n                                    >\r\n                                    </input><br></br>\r\n                                </form>\r\n\r\n                                <Link style = {{textDecoration : 'none'}} to=\"/login\" >\r\n                                <button className=\" btn btn-get-started log-cont\"> Login To Continue </button>\r\n                                </Link>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n}\r\n\r\nexport default Cart","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\actiontypes.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Product\\Products.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Cart\\CartItem.js",["148","149"],"import React, {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeFromCart, adjstQty } from '../../redux/Shopping/productaction';\r\n\r\nconst CartItem = (data) => {\r\n\r\n    //let p = data.data.price;\r\n\r\n    const [price, setPrice] = useState(data.data.price);\r\n    const t = data.data.price;\r\n\r\n    const increment = () => {\r\n        var value = parseInt(document.getElementById('demo').value);\r\n        const key = data.data.qty;\r\n        value = key;\r\n        value++;\r\n        document.getElementById('demo').value = value;\r\n        dispatch(adjstQty(data.data._id, value));\r\n        \r\n       // console.log(p);\r\n    }\r\n\r\n    const decrement = () => {\r\n        var value = parseInt(document.getElementById('demo').value);\r\n        const key = data.data.qty;\r\n        value = key;\r\n        if (value > 1) {\r\n            value--;\r\n            document.getElementById('demo').value = value;\r\n            dispatch(adjstQty(data.data._id, value));\r\n           \r\n        }\r\n        console.log(value);\r\n    }\r\n\r\n    // console.log(data);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <div className=\"col-lg-12 col-md-12 col-sm-12 mb-3 shopping-cart\">\r\n\r\n\r\n                {/* start */}\r\n\r\n\r\n\r\n\r\n                <div class=\"item\">\r\n\r\n                    <div class=\"image\">\r\n                        <img src={data.data.img} alt={data.data.img} />\r\n                    </div>\r\n\r\n                    <div class=\"description\">\r\n                        <h5>{data.data.heading}</h5>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"quantity\">\r\n                        <input className=\"plus\" type=\"button\"\r\n                            onClick={increment}\r\n                            value= \"+\"\r\n                        />\r\n                        <input\r\n                            id=\"demo\"\r\n                            className=\"input\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={data.data.qty}\r\n                        />\r\n\r\n                        <input className=\"minus\" type=\"button\"\r\n                            onClick={decrement}\r\n                            value=\"-\"\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <div className=\"mt-3\" ><p>{price}$</p></div>\r\n\r\n                    <i class=\"fas fa-trash \" onClick={() => dispatch(removeFromCart(data.data._id))} ></i>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {/* end */}\r\n\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartItem;","E:\\Project1\\pizza-app\\Client\\src\\Components\\Product\\Product.js",["150","151"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { addToCart } from '../../redux/Shopping/productaction';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction Product({ data }) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const getIt = (id) => {\r\n\r\n        // const dev = document.querySelectorAll('.cart-button');\r\n        // console.log(dev);\r\n\r\n        // dev.forEach((e) =>{\r\n        //     e.classList.add('clicked');\r\n        // })\r\n\r\n\r\n        toast.warn(`🛒 Added to the Cart`,{\r\n            position: \"top-right\",\r\n            hideProgressBar: true,\r\n            autoClose: 2000,\r\n\r\n        })\r\n        dispatch(addToCart(data._id))\r\n\r\n\r\n        // dev.forEach((e) =>{\r\n        //     e.classList.remove('clicked');\r\n        // })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\" product-group col-lg-3 col-md-4 col-12\">\r\n\r\n                <div className=\"product\">\r\n                    <img src={data.img} alt={data.img} />\r\n                    <div class=\"product-body\">\r\n                        <div class=\"product-desc\">\r\n                            <Link to={`/details/${data._id}`}>\r\n                                <h3 className=\"text-center\"> <a href=\"#\">{data.heading}</a> </h3>\r\n                            </Link>\r\n                            <p className=\"text-center mx-2\">Li Europan lingues es membres del sam familie. Lor separat existentie es un myth. Por scientie, musica, sport etc</p>\r\n                            <div class=\"favorite\">\r\n                                <p class=\"product-price\">{data.price}$</p>\r\n\r\n                                <i class=\"far fa-heart\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"product-controls\">\r\n                            <button onClick={() => getIt(data._id)} className=\" cart-button btn btn-get-started \"><span className=\"text\">Add to cart       <i class=\"fas fa-shopping-cart\"></i>\r\n                            </span>\r\n                            </button>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <ToastContainer \r\n            \r\n            />\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Product;","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\productaction.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Register\\Register.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Login\\Login.js",[],"E:\\Project1\\pizza-app\\Client\\src\\api\\index.js",[],"E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\cartreducer.js",["152","153"],"import * as actiontypes from './actiontypes';\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const cartreducer = (state = {cart :  JSON.parse(localStorage.getItem('cart'))  ? JSON.parse(localStorage.getItem('cart')) : [] }, action) => {\r\n\r\n   // const products = useSelector(state.productreducer.products);\r\n\r\n\r\n    switch(action.type){\r\n        case actiontypes.ADD_TO_CART:\r\n            const item = action.payload;\r\n\r\n            const existItem= state.cart.find((x) => x._id === item._id ? true : false);\r\n\r\n\r\n            return {\r\n                // First we are checking that if item id present in the cart that we are updating the quantity otherwise we are taking the quantity as 1\r\n                ...state,\r\n                cart: existItem\r\n                  ? state.cart.map((item) =>\r\n                      item._id === action.payload._id\r\n                        ? { ...item, qty: item.qty + 1 }\r\n                        : item\r\n                    )\r\n                  : [...state.cart, { ...item, qty: 1 }],\r\n            };\r\n\r\n            // if(existItem){\r\n            //     return{\r\n            //         ...state,\r\n            //         cart : state.cart.map((x) => x.id === existItem.id ? item : x),\r\n            //     };\r\n            // }\r\n\r\n            // else{\r\n            //     return{\r\n            //         ...state,\r\n            //         cart : [...state.cart, item]\r\n            //     };\r\n            // }\r\n\r\n            \r\n            // const item = state.products.find((x) => x.id === action.payload.id);\r\n            // //chech that product is already present in the cart or not\r\n            // var inCart = false;\r\n            // if(state.cart!= undefined){\r\n            //  inCart = state.cart.find((item) => \r\n            //     item._id === action.payload.id ? true : false\r\n            // );}\r\n            // return {\r\n            //     // First we are checking that if item id present in the cart that we are updating the quantity otherwise we are taking the quantity as 1\r\n            //     ...state,\r\n            //     cart: inCart\r\n            //       ? state.cart.map((item) =>\r\n            //           item._id === action.payload.id\r\n            //             ? { ...item, qty: item.qty + 1 }\r\n            //             : item\r\n            //         )\r\n            //       : [...state.cart, { ...item, qty: 1 }],\r\n            // };\r\n        \r\n\r\n\r\n            case actiontypes.REMOVE:\r\n                return {\r\n                    ...state,\r\n                    cart : state.cart.filter((item) => \r\n                        item._id != action.payload.id\r\n                    )\r\n                };\r\n                \r\n                case actiontypes.ADJUST_QTY:\r\n            return {\r\n                ...state,\r\n                cart : state.cart.map((item) => \r\n                    item._id === action.payload.id ? {...item, qty : +action.payload.qty} : item\r\n                )\r\n            };\r\n\r\n            case actiontypes.CLEAR_CART :\r\n                return{\r\n                    ...state,\r\n                    cart : []\r\n                };\r\n\r\n            default : \r\n            return state\r\n    }\r\n}","E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\authreducer.js",[],"E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\authaction.js",[],"E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\orderaction.js",[],"E:\\Project1\\pizza-app\\Client\\src\\redux\\Shopping\\orderReducer.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Order\\OrderItme.js",["154"],"import {useState} from 'react'\r\nimport OrderMenu from '../Order/OrderItemMenu';\r\nimport {GET_STATUS} from \"../../redux/Shopping/actiontypes\";\r\nimport { Link } from 'react-router-dom'\r\nimport {getStatus} from '../../api';\r\nimport moment from 'moment';\r\nimport {useDispatch} from 'react-redux';\r\nconst OrderItem = (data) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const getIt = async(id) =>{\r\n\r\n            console.log(\"I entered\")\r\n\r\n            const{data} = await getStatus(id);\r\n          dispatch({type : GET_STATUS, payload : data});\r\n          \r\n            \r\n        \r\n\r\n     \r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <tr>\r\n            < Link onClick = { () => {getIt(data.data._id)}} to={`/status/${data.data._id}`}>\r\n             \r\n                <td  >\r\n\r\n                        \r\n                        {data.data._id}\r\n                    \r\n                </td>\r\n                </ Link>\r\n                {/* <td>{data.data.items}</td> */}\r\n                <td> {\r\n\r\n\r\n                    data.data.items.map((data, ind) => {\r\n                        return <OrderMenu\r\n                            key={ind}\r\n                            data={data}\r\n                        />\r\n                    })\r\n\r\n\r\n                }</td>\r\n                <td>{data.data.phone}</td>\r\n                <td>{data.data.address}</td>\r\n                <td>{moment(data.data.createdAt).format('hh mm A')}   on   {moment(data.data.createdAt).format('MMMM Do YYYY')}</td>\r\n                {/* <td>{time}</td> */}\r\n            </tr>\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderItem;","E:\\Project1\\pizza-app\\Client\\src\\Components\\Order\\OrderItemMenu.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\Dashboard\\Dash.js",["155","156"],"import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getAdminOrder} from '../../redux/Shopping/orderaction';\r\nimport DashboardItem from './DashboardItem'\r\nimport openSocket from 'socket.io-client';\r\n\r\n\r\nconst Dash = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n  console.log('Dash page')\r\n    const adminorders = useSelector(state => state.orderReducer.adminorders)\r\n    let[allOrder, setAllOrder] = useState(true)\r\n\r\n  \r\n    \r\n    \r\n        \r\n    \r\n\r\n    const loading = useSelector(state => state.orderReducer.loading);\r\n\r\n    console.log(JSON.parse(localStorage.getItem('profile')).result.role);\r\n\r\n\r\n    let connectionOptions = {\r\n        \"force new connection\": true,\r\n        \"reconnectionAttempts\": \"Infinity\",\r\n        \"timeout\": 10000,\r\n        \"transports\": [\"websocket\"]\r\n    };\r\n\r\n    let v = 0;\r\n    const socket = openSocket('http://localhost:5000', connectionOptions);\r\n    socket.emit('join', 'adminRoom')\r\n\r\n    console.log('gettingit')\r\n   \r\n    socket.on('orderPlaced', (data) =>{\r\n        \r\n\r\n        console.log('Dash Socket');\r\n        \r\n        console.log(allOrder);\r\n\r\n        v=1;\r\n\r\n\r\n         console.log(allOrder)\r\n        if(adminorders){\r\n         adminorders.unshift(data);\r\n        }\r\n    setAllOrder(allOrder = !allOrder);\r\n\r\n    console.log(allOrder)\r\n\r\n        \r\n    })\r\n  \r\n    \r\n\r\n    console.log('Lind')\r\n    useEffect(() => {\r\n        dispatch(getAdminOrder());\r\n        \r\n    }, [dispatch, allOrder]);\r\n\r\n\r\n    if (loading === true) {\r\n        return (\r\n            <div>Loading</div>\r\n        )\r\n    }\r\n\r\n    if(adminorders==undefined ){\r\n        return(\r\n            <div>Loading...</div>\r\n        )\r\n    }\r\n\r\n   else{\r\n\r\n   \r\n   \r\n\r\n    return(\r\n        <>\r\n        <div className=\"main-order\">\r\n                <h2>Orders</h2>\r\n                <div className=\"o-table\">\r\n                    <table class=\"styled-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"order-id\">Orders</th>\r\n                                <th>Items</th>\r\n                                <th>Phone</th>\r\n                                <th>Address</th>\r\n                                <th>Order-Status</th>\r\n                                <th>Time</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {/* <tr>\r\n                        <td>Dom</td>\r\n                        <td>6000</td>\r\n                    </tr>\r\n                    <tr class=\"\">\r\n                        <td>Melissa</td>\r\n                        <td>5150</td>\r\n                    </tr> */}\r\n\r\n                            {adminorders.map((data, ind) => {\r\n                                return <DashboardItem\r\n                                    key={ind}\r\n                                    data={data}\r\n                                />\r\n                            })}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n   }\r\n}\r\n\r\nexport default Dash;","E:\\Project1\\pizza-app\\Client\\src\\Components\\Dashboard\\DashboardItem.js",["157"],"import DashboardMenu from '../Dashboard/DashboardMenu'\r\nimport moment from 'moment';\r\nimport Select from 'react-select';\r\nimport {useDispatch} from 'react-redux';\r\nimport {updateStatu} from '../../redux/Shopping/orderaction'\r\nconst DashboardItem = (data) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const status = [\r\n        { label: \"Order_placed\", value : \"Order_placed\" },\r\n        { label: \"confirmed\", value: \"confirmed\" },\r\n        { label: \"prepared\", value: \"prepared\"  },\r\n        { label: \"delivered\", value: \"delivered\" },\r\n        { label: \"completed\", value: \"completed\" }\r\n      ];\r\n\r\n      const updateIt =  (e) =>{\r\n\r\n        dispatch(updateStatu(data.data._id, e.value));\r\n           \r\n      }\r\n    \r\n    \r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <tr>\r\n                <td>{data.data._id}</td>\r\n                {/* <td>{data.data.items}</td> */}\r\n                <td> {\r\n\r\n                    \r\n                        data.data.items.map((data, ind) => {\r\n                            return <DashboardMenu\r\n                                key={ind}\r\n                                data={data}\r\n                            />\r\n                        })\r\n                    \r\n\r\n                }</td>\r\n                <td>{data.data.phone}</td>\r\n                <td>{data.data.address}</td>\r\n                <td>  <Select onChange = {updateIt} \r\n                defaultValue =  { status.find((e) => {\r\n                   return e.label == data.data.status\r\n                })}\r\n                options={status} />  </td>\r\n                <td>{moment(data.data.createdAt).format('hh mm A')}   on   {moment(data.data.createdAt).format('MMMM Do YYYY')}</td>\r\n                {/* <td>{time}</td> */}\r\n            </tr>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DashboardItem;","E:\\Project1\\pizza-app\\Client\\src\\Components\\Dashboard\\DashboardMenu.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\SingleProduct\\Single.js",[],"E:\\Project1\\pizza-app\\Client\\src\\Components\\StatusPage\\StatusPage.js",["158","159","160","161","162","163","164"],"import React, {  useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport '../StatusPage/Status.css'\r\nimport moment from 'moment';\r\nimport openSocket from 'socket.io-client';\r\n\r\nconst StatusPage = () => {\r\n\r\n const[time, setTime] = useState(\"\");\r\n\r\n    let check = [\r\n\r\n        {\r\n            \"value\": \"status-line\",\r\n            \"name\": \"Order_placed\",\r\n            \"index\": 0\r\n        },\r\n        {\r\n            \"value\": \"status-line\",\r\n            \"name\": \"confirmed\",\r\n            \"index\": 1\r\n        },\r\n        {\r\n            \"value\": \"status-line\",\r\n            \"name\": \"prepared\",\r\n            \"index\": 2\r\n        },\r\n        {\r\n            \"value\": \"status-line\",\r\n            \"name\": \"delivered\",\r\n            \"index\": 3\r\n        },\r\n        {\r\n            \"value\": \"status-line\",\r\n            \"name\": \"completed\",\r\n            \"index\": 4\r\n        }\r\n    ]\r\n\r\n\r\n\r\n    // console.log(statuses)\r\n\r\n\r\n    //    JSON.parse(check).forEach((e) =>{\r\n    //        console.log(e);\r\n    //    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const statusdata = useSelector(state => state.orderReducer)\r\n    console.log(statusdata.status);\r\n\r\n\r\n\r\n    if (statusdata.status) {\r\n\r\n        let updateOrder = undefined;\r\n\r\n        let connectionOptions = {\r\n            \"force new connection\": true,\r\n            \"reconnectionAttempts\": \"Infinity\",\r\n            \"timeout\": 10000,\r\n            \"transports\": [\"websocket\"]\r\n        };\r\n\r\n        let t = 0;\r\n\r\n        const socket = openSocket('http://localhost:5000', connectionOptions);\r\n        socket.emit('join', `order_${statusdata.status._id}`)\r\n\r\n        socket.on('orderUpdated', (data) => {\r\n            updateOrder = { ...statusdata.status };\r\n            \r\n            updateOrder.status = data.status\r\n\r\n           console.log(updateOrder.updatedAt)\r\n\r\n            console.log(\"socket\")\r\n\r\n            // let currentState = document.querySelectorAll('li.current');;\r\n            // let stepState = document.querySelectorAll('li.step-completed');\r\n            // let Order_placed = document.querySelectorAll('li.Order_placed');\r\n            // let confirmed = document.querySelectorAll('li.confirmed');\r\n            // let prepared = document.querySelectorAll('li.prepared');\r\n            // let delivered = document.querySelectorAll('li.delivered');\r\n            // let completed = document.querySelectorAll('li.completed');\r\n\r\n            // if (currentState.length > 0) {\r\n            //     if (currentState[0].classList)\r\n            //         currentState[0].remove('.current')\r\n            // }\r\n\r\n            // if (stepState.length > 0) {\r\n            //     if (stepState[0].classList)\r\n            //         currentState[0].remove('.step_completed')\r\n            // }\r\n\r\n            // if (Order_placed.length > 0) {\r\n            //     if (Order_placed[0].classList)\r\n            //         currentState[0].remove('.Order_placed')\r\n            // }\r\n\r\n            // if (confirmed.length > 0) {\r\n            //     if (confirmed[0].classList)\r\n            //         confirmed[0].remove('.confirmed')\r\n            // }\r\n\r\n            // if (prepared.length > 0) {\r\n            //     if (prepared[0].classList)\r\n            //         currentState[0].remove('.prepared')\r\n            // }\r\n\r\n            let status = document.querySelectorAll('.status-line');\r\n            let currentState = document.querySelectorAll('.current');\r\n            let completeState = document.querySelectorAll('.step-completed');\r\n            let time = document.createElement('small');\r\n        \r\n            if(currentState){\r\n                currentState.forEach((e) =>{\r\n                    e.classList.remove('current');\r\n                })\r\n            }\r\n           \r\n            if(completeState){\r\n                completeState.forEach((e) =>{\r\n                    e.classList.remove('step-completed')\r\n                })\r\n            }\r\n            \r\n\r\n            currentState.forEach((e) =>{\r\n                console.log(e.classList);\r\n            })\r\n\r\n            completeState.forEach((e) => {\r\n                console.log(e.classList)\r\n            })\r\n\r\n\r\n            if(currentState){\r\n                currentState.forEach((e) =>{\r\n                    e.classList.add('status-line');\r\n                })\r\n            }\r\n           \r\n            if(completeState){\r\n                completeState.forEach((e) =>{\r\n                    e.classList.add('status-line')\r\n                })\r\n            }\r\n\r\n            currentState.forEach((e) =>{\r\n                console.log(e.classList);\r\n            })\r\n\r\n            completeState.forEach((e) => {\r\n                console.log(e.classList)\r\n            })\r\n            \r\n\r\n            \r\n            \r\n            status = document.querySelectorAll('.status-line')\r\n            time = document.querySelectorAll('small')\r\n           \r\n            let checkMate = true;\r\n            status.forEach((e) =>{\r\n                \r\n                if(checkMate){\r\n                   e.classList.add('step-completed')\r\n                }\r\n\r\n                if(e.dataset.status == updateOrder.status){\r\n                    checkMate = false;\r\n                    e.classList.add('step-completed')\r\n                    console.log(e.getElementsByTagName('small'))\r\n                    e.getElementsByTagName('small')[0].innerText = moment(updateOrder.updatedAt).format('hh:mm a');\r\n                    \r\n                    if(e.nextElementSibling)\r\n                    e.nextElementSibling.classList.add('current')\r\n                }\r\n\r\n            })\r\n\r\n        })\r\n\r\n        t = 0;\r\n        let status_data = true;\r\n        check.forEach((e) => {\r\n\r\n            if(status_data){\r\n                e.value = \"step-completed\"\r\n            }\r\n\r\n            if (e.name == statusdata.status.status) {\r\n                status_data = false;\r\n                e.value = \"step-completed\"\r\n                t = e.index + 1;\r\n            }\r\n        })\r\n\r\n        if (t < 5) {\r\n            check[t].value = \"current\";\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    if (statusdata.status == undefined) {\r\n\r\n        return (\r\n\r\n            <h1>loading</h1>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n    else {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n\r\n\r\n\r\n\r\n            <>\r\n                <section class=\"status\">\r\n                    <div class=\"container mx-auto \">\r\n                        <div className=\"row status_row\">\r\n                            <div class=\"status_box col-lg-12 col-sm-12 col-xl-12\">\r\n                                <div class=\"status_heading\">\r\n                                    <h2 class=\"\">Track delivery status</h2>\r\n                                    <h6 class=\"status_id\">{statusdata.status._id}</h6>\r\n                                    <input id=\"hiddenInput\" type=\"hidden\" value={statusdata.status.status}></input>\r\n                                </div>\r\n\r\n                                <ul >\r\n                                    <li className={check[0].value} data-status=\"Order_placed\"><span>Order Placed</span><small className=\"small-tag\"> </small>\r\n                                    </li>\r\n                                    <li className={check[1].value} data-status=\"confirmed\"><span>Order confirmation</span><small className=\"small-tag\"> </small>\r\n                                    </li>\r\n                                    <li className={check[2].value} data-status=\"prepared\"><span>Preparation</span><small className=\"small-tag\"> </small></li>\r\n                                    <li className={check[3].value} data-status=\"delivered\"><span>Out for delivery </span><small className=\"small-tag\"> </small>\r\n                                    </li>\r\n                                    <li className={check[4].value} data-status=\"completed\"><span>Complete</span><small className=\"small-tag\"> </small></li>\r\n                                </ul>\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section >\r\n\r\n            </>\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default StatusPage;",{"ruleId":"165","severity":1,"message":"166","line":10,"column":109,"nodeType":"167","messageId":"168","endLine":10,"endColumn":111},{"ruleId":"165","severity":1,"message":"166","line":10,"column":149,"nodeType":"167","messageId":"168","endLine":10,"endColumn":151},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":21,"column":11,"nodeType":"175","messageId":"176","endLine":21,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":27,"column":15,"nodeType":"179","messageId":"180","endLine":27,"endColumn":17},{"ruleId":"173","severity":1,"message":"181","line":13,"column":18,"nodeType":"175","messageId":"176","endLine":13,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":22,"column":8,"nodeType":"184","endLine":22,"endColumn":18,"suggestions":"185"},{"ruleId":"177","severity":1,"message":"178","line":31,"column":14,"nodeType":"179","messageId":"180","endLine":31,"endColumn":16},{"ruleId":"173","severity":1,"message":"186","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":12},{"ruleId":"173","severity":1,"message":"187","line":24,"column":10,"nodeType":"175","messageId":"176","endLine":24,"endColumn":18},{"ruleId":"173","severity":1,"message":"188","line":24,"column":20,"nodeType":"175","messageId":"176","endLine":24,"endColumn":31},{"ruleId":"173","severity":1,"message":"189","line":27,"column":11,"nodeType":"175","messageId":"176","endLine":27,"endColumn":16},{"ruleId":"182","severity":1,"message":"190","line":32,"column":6,"nodeType":"184","endLine":32,"endColumn":16,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":108,"column":15,"nodeType":"194","endLine":108,"endColumn":60},{"ruleId":"192","severity":1,"message":"193","line":110,"column":15,"nodeType":"194","endLine":110,"endColumn":59},{"ruleId":"192","severity":1,"message":"193","line":161,"column":15,"nodeType":"194","endLine":161,"endColumn":60},{"ruleId":"192","severity":1,"message":"193","line":163,"column":15,"nodeType":"194","endLine":163,"endColumn":59},{"ruleId":"195","severity":1,"message":"196","line":31,"column":19,"nodeType":"197","messageId":"198","endLine":31,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":69,"column":33,"nodeType":"179","messageId":"180","endLine":69,"endColumn":35},{"ruleId":"177","severity":1,"message":"178","line":163,"column":35,"nodeType":"179","messageId":"180","endLine":163,"endColumn":37},{"ruleId":"173","severity":1,"message":"199","line":9,"column":19,"nodeType":"175","messageId":"176","endLine":9,"endColumn":27},{"ruleId":"173","severity":1,"message":"200","line":10,"column":11,"nodeType":"175","messageId":"176","endLine":10,"endColumn":12},{"ruleId":"173","severity":1,"message":"201","line":1,"column":17,"nodeType":"175","messageId":"176","endLine":1,"endColumn":25},{"ruleId":"202","severity":1,"message":"203","line":55,"column":62,"nodeType":"194","endLine":55,"endColumn":74},{"ruleId":"173","severity":1,"message":"204","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":21},{"ruleId":"177","severity":1,"message":"205","line":68,"column":34,"nodeType":"179","messageId":"180","endLine":68,"endColumn":36},{"ruleId":"173","severity":1,"message":"201","line":1,"column":9,"nodeType":"175","messageId":"176","endLine":1,"endColumn":17},{"ruleId":"173","severity":1,"message":"206","line":50,"column":9,"nodeType":"175","messageId":"176","endLine":50,"endColumn":10},{"ruleId":"177","severity":1,"message":"178","line":79,"column":19,"nodeType":"179","messageId":"180","endLine":79,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":49,"column":35,"nodeType":"179","messageId":"180","endLine":49,"endColumn":37},{"ruleId":"173","severity":1,"message":"207","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":19},{"ruleId":"173","severity":1,"message":"208","line":10,"column":8,"nodeType":"175","messageId":"176","endLine":10,"endColumn":12},{"ruleId":"173","severity":1,"message":"209","line":10,"column":14,"nodeType":"175","messageId":"176","endLine":10,"endColumn":21},{"ruleId":"173","severity":1,"message":"208","line":170,"column":13,"nodeType":"175","messageId":"176","endLine":170,"endColumn":17},{"ruleId":"177","severity":1,"message":"178","line":179,"column":37,"nodeType":"179","messageId":"180","endLine":179,"endColumn":39},{"ruleId":"177","severity":1,"message":"178","line":201,"column":24,"nodeType":"179","messageId":"180","endLine":201,"endColumn":26},{"ruleId":"177","severity":1,"message":"178","line":219,"column":27,"nodeType":"179","messageId":"180","endLine":219,"endColumn":29},"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-native-reassign",["210"],"no-negated-in-lhs",["211"],"no-unused-vars","'products' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.result._id'. Either include it or remove the dependency array.","ArrayExpression",["212"],"'Cart' is defined but never used.","'isMoblie' is assigned a value but never used.","'setIsMoblie' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user?.token'. Either include it or remove the dependency array.",["213"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setPrice' is assigned a value but never used.","'t' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useSelector' is defined but never used.","Expected '!==' and instead saw '!='.","'v' is assigned a value but never used.","'useEffect' is defined but never used.","'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},"Update the dependencies array to be: [dispatch, user.result._id]",{"range":"218","text":"219"},"Update the dependencies array to be: [location, user?.token]",{"range":"220","text":"221"},[620,630],"[dispatch, user.result._id]",[938,948],"[location, user?.token]"]